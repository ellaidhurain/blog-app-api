import mongoose from "mongoose";

/*
 schema is a blueprint or structure that defines the shape of documents within a 
 collection. It defines the fields, types, and constraints for the data stored in 
 MongoDB. 
*/

const Schema = mongoose.Schema;

const blogSchema = new Schema({
  title: {
    type: String,
    // required: true,
  },

  description: {
    type: String,
    required: true,
  },

  image: {
    type: String,
    required: true,
  },

  // foreign key relationship
  user: {
    type: mongoose.Types.ObjectId, //ObjectId is a unique identifier automatically generated by MongoDB for each document. By using mongoose.Types.ObjectId as the type, Mongoose knows to expect and handle ObjectId values for this field.
    ref: "UserData", // foreign key ref with UserData model
    required: true,
  },

},{timestamps:true});

const commentSchema = new Schema({

  comment:{
    type:String,
  },

  user: {
    type: mongoose.Types.ObjectId, 
    ref: "UserData",
    required: true,
  },

  blog: {
    type: mongoose.Types.ObjectId,
    ref: "BlogData",
    required: true,
  },
},{timestamps:true})

const likeSchema = new Schema({
  user: {
    type: mongoose.Types.ObjectId, 
    ref: "UserData",
    required: true,
  },

  blog: {
    type: mongoose.Types.ObjectId,
    ref: "BlogData",
    required: true,
  },
},{timestamps:true})

// "BlogData" => DB collection name
const BlogData = mongoose.model("BlogData", blogSchema);
const CommentData = mongoose.model("CommentData", commentSchema);
const LikeData = mongoose.model("LikeData", likeSchema);

export default BlogData; 
export { CommentData,LikeData };
